search := procedure(start, goal, nextStates) {
    limit := 1;
    while (true) {
        print("limit = $limit$");
        path := depthLimitedSearch(start, goal, nextStates, limit);
        if (path != om) {
            return path;
        }
        limit += 1;
    }
};

depthLimitedSearch := procedure(start, goal, nextStates, limit) {
    Stack    := [ start ];
    Distance := { [start, 0] };  // What is the distance to start?
    Parent   := {};
    while (Stack != []) {
        state := Stack[-1];
        Stack := Stack[..-2];
        if (state == goal) {
            print(Distance[state]);
            print("$#Distance$ nodes expanded");
            return pathTo(state, Parent);
        }
        ds := Distance[state];            // ds:  distance state 
        if (ds >= limit) {
            continue;
        }
        for (ns in nextStates(state)) {   // ns:  new state
            dns := Distance[ns];          // dns: distance new state
            if (dns != om && dns <= ds + 1) {
                continue;
            } 
            Distance[ns] := ds + 1;
            Parent[ns]   := state;
            if (!(ns in Stack)) {
                Stack += [ns];
            }
        }
    }
    print("$#Distance$ nodes expanded");
};

