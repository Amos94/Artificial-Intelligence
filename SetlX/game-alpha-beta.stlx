value := cachedProcedure(State, player, alpha := -1, beta := 1) {
    if (finished(State)) {
        return utility(State, player);
    }
    other := arb(players() - { player });
    val   := alpha;
    for (ns in nextStates(State, player)) {
        val := max({ val, -value(ns, other, -beta, -val) });
        if (val >= beta) {
            return val;
        }
    }
    return val;
};
best_move := procedure(State, player) {
    bestVal := value(State, player);
    NS      := nextStates(State, player);
    other   := arb(players() - { player });
    return [bestVal, rnd({ns : ns in NS | -value(ns,other) == bestVal})];
};
play_game := procedure(n) {
    State := startState(n);
    print(stateToString(State));
    while (!finished(State)) {
        start        := now();
        [val, State] := best_move(State, "O");
        stop         := now();
        print(cacheStats(value));
        clearCache(value);
        print("For me, the game has the value $val$.  My move:");
        print(stateToString(State));
        print("computation took $(stop - start) * 0.001$ seconds");
        if (final_msg(State)) { return; }
        State := getMove(State);
        print(stateToString(State));
        if (final_msg(State)) { return; }
    }
};
