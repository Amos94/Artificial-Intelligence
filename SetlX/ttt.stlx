load("game.stlx");
// load("game-alpha-beta.stlx");
// load("game-limit.stlx");

players := procedure() {
    return { "X", "O" };
};
startState := procedure(n := 3) {
    L := [1 .. n];
    return [ [ " " : col in L] : row in L];
};
nextStates := procedure(State, player) {
    Empty  := find_empty(State);
    Result := {};
    for ([row, col] in Empty) {
        NextState           := State;
        NextState[row][col] := player;
        Result              += { NextState };
    }
    return Result;
};
find_empty := procedure(State) {
    n := #State;
    L := [1 .. n];
    return { [row, col] : row in L, col in L | State[row][col] == " " };
};
utility := procedure(State, player) {
    n     := #State;
    Lines := all_lines(n);
    // all lines are checked whether they contain 3 identical nonempty marks 
    for (Line in Lines) {
        Elements := { State[row][col] : [row, col] in Line };
        if (#Elements == 1 && Elements != { " " }) {
            if (Elements == { player }) {
                return  1;
            } else {
                return -1;
            }
        }
    }
    // no winner so far, check for a draw
    if (find_empty(State) == {}) {  // no empty squares
        return 0;  // game drawn
    } // else return om
};
all_lines := procedure(n) {
    L := [1 .. n];
    // Lines is the set of all horizontal, vertical, and diagonal lines in the game
    // we start with the rows
    Lines := { { [row, col] : col in L } : row in L };
    // we add the columns
    Lines += { { [row, col] : row in L } : col in L };
    // the falling diagonal
    Lines += { { [idx, idx] : idx in L } };
    // finally, the rising diagonal
    Lines += { { [idx,-idx] : idx in L } };
    return Lines;
};
finished := procedure(State) {
    return utility(State, "X") != om;
};
////////////////////////////////////////////////////////////////////////////////
// for pretty printing
stateToString := procedure(State) {
    n     := #State;
    L     := [1 .. n];
    ls    := "\n" + "-" * (4 * n + 1) + "\n";  // line separator
    board := join(["| " + join([State[r][c]: c in L]," | ") + " |": r in L], ls);
    return ls + board + ls;
};

getMove := procedure(State) {
    [row, col] := split(read("Your turn, enter move as row, col: "), " *, *");
    [row, col] := [int(row), int(col)];
    State[row][col] := "X";
    return State;
};
final_msg := procedure(State) {
    if (finished(State)) {
        msg := "The game is finished. ";
        if (utility(State, "X") == 1) {
            print(msg + "You have won!");
        } else if (utility(State, "X") == -1) {
            print(msg + "You lost!");
        } else {
            print(msg + "It's a draw.");
        }
        return true;
    }
    return false;
};

play_game(3);

