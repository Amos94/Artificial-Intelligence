findMaximum := procedure(f, gradF, start, eps) {
    x     := start;
    f_x   := f(x);
    alpha := 1.0;
    while (true) {
        [x_old, f_old] := [x, f_x];
        x   += alpha * gradF(x);
        f_x := f(x);
        if (f_x < f_old) {   
            alpha *= 0.5;
            [x, f_x] := [x_old, f_old];
            continue;
        } else {
            alpha *= 1.2;
        }
        if (abs(f_x - f_old) <= abs(f_x) * eps) {
            return [x, f_x];
        } 
    }
};

easy := procedure(x) {
    [x1, x2] := [x[1], x[2]];
    return -((x1 - 10)**2 + 2*(x2 - 5)**2) + 1;
};

easyGrad := procedure(x) {
    [x1, x2] := [x[1], x[2]];
    return la_vector([ -2 * (x1 - 10), -4 * (x2 - 5) ]);
};
        
rosenbrock := procedure(x) {
    [x1, x2] := [x[1], x[2]];
    return 1 - ((1 - x1)**2 + 100 * (x2 - x1**2)**2);
};

rosenbrockGrad := procedure(x) {
    [x1, x2] := [x[1], x[2]];
    return la_vector([2 * (1 - x1) + 400 * x1 * (x2 - x1**2), -200 * (x2 - x1**2)]);
};

test := procedure() {
    start := la_vector([0, 0]);
    [x, fx] := findMaximum(easy, easyGrad, start, 10**-12);
    print("maximum at $x$, value $fx$");
    [x, fx] := findMaximum(rosenbrock, rosenbrockGrad, start, 10**-12);
    print("maximum at $x$, value $fx$");
};

test();
