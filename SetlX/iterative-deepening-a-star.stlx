// Iterative deepening A* search.
idaStarSearch := procedure(start, goal, nextStates, heuristic) {
    limit := heuristic(start, goal);
    while (true) {
        print("limit = $limit$");
        Path := search(start, goal, nextStates, 0, limit, [start], heuristic);
        if (isList(Path)) {
            return Path;
        }
        limit := Path;
    }
};
search := procedure(state, goal, nextStates, distance, limit, Path, heuristic) {
    total := distance + heuristic(state, goal);
    if (total > limit) {
        return total;
    }
    if (state == goal) {
        return Path;
    }
    smallest := mathConst("Infinity");
    for (ns in nextStates(state) | !(ns in Path) ) {
        result := search(ns, goal, nextStates, distance+1, limit, Path+[ns], heuristic);
        if (isList(result)) {
            return result;
        }
        smallest := min([result, smallest]);
    }
    return smallest;
};

