value := cachedProcedure(State, player, limit := 0) {
    if (finished(State)) {
        return utility(State, player);
    }
    if (limit == 0) {
        return 0;
    }
    other := arb(players() - { player });
    return max({ -value(s, other, limit -1) : s in nextStates(State, player) });
};
best_move := procedure(State, player, limit) {
    AllStates := nextStates(State, player);
    other     := arb(players() - { player });
    bestValue := max({ -value(s, other, limit) : s in AllStates });
    return rnd({ s : s in AllStates | -value(s, other, limit) == bestValue });
};
play_game := procedure(n, limit) {
    resetRandom();
    State := startState(n);
    print(stateToString(State));
    while (!finished(State)) {
        start := now();
        State := best_move(State, "O", limit);
        stop  := now();
        print("My move");
        print(stateToString(State));
        print("computation took $(stop - start) * 0.001$ seconds");
        if (final_msg(State)) { return; }
        State := getMove(State);
        print(stateToString(State));
        if (final_msg(State)) { return; }
    }
};

